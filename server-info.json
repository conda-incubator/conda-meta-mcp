{
  "name": "Conda ECO System Meta Data MCP",
  "instructions": null,
  "fastmcp_version": "2.11.3",
  "mcp_version": "1.13.1",
  "server_version": null,
  "tools": [
    {
      "key": "info",
      "name": "info",
      "description": "Display information about the MCP instance.",
      "input_schema": {
        "properties": {},
        "type": "object"
      },
      "annotations": null,
      "tags": null,
      "enabled": true
    },
    {
      "key": "package_insights",
      "name": "package_insights",
      "description": "Provides insights into a package's info tarball\n\nThat includes the rendered recipe (meta.yaml) that allows for easy inspection of the\npackage's build process, e.g. see build, host and run time dependencies. Which have\nbig influence on what packages are linked against. The run_exports which end up as\nrun time dependencies for other packages linked against this package. And the about\ninformation which contain the remote_url and sha to the repo location where the\npackage recipe is maintained. That helps to open PRs in the right location to fix\nissues with the recipe.\n\nArgs:\n  url: The full package URL, e.g.\n  \"https://conda.anaconda.org/conda-forge/linux-64/numpy-1.24.3-py311h7f8727e_0.tar.bz2\"\n\n  file: can be set to \"some\", \"all\", \"list-without-content\" or to a specific filename\n  like \"info/recipe/meta.yaml\"\n\n  Returns:\n    A dictionary with key=filename, value=content.",
      "input_schema": {
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "file": {
            "default": "some",
            "title": "File",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "annotations": null,
      "tags": null,
      "enabled": true
    },
    {
      "key": "package_search",
      "name": "package_search",
      "description": "Search available conda packages matching the given package_ref_or_match_spec, channel, and\nplatform.\n\nFeatures:\n  - Results are deduplicated.\n  - Ordered by newest (version, then build_number descending).\n  - limit=1 reliably returns the single newest record.\n  - Supports paging via (offset, limit).\n\nArgs:\n  package_ref_or_match_spec (PackageRef or MatchSpec or str):\n    e.g. \"numpy\", \"numpy>=1.20\", \"numpy=1.20.3\", \"numpy=1.20.3=py38h550f1ac_0\"\n  channel (str): e.g. \"defaults\", \"conda-forge\", \"bioconda\", \"nvidia\"\n  platform (str): e.g. \"linux-64\", \"linux-aarch64\", \"osx-64\", \"osx-arm64\", \"win-64\"\n  limit (int): Maximum number of results to return (0 means all).\n  offset (int): Number of results to skip before applying limit (for paging).",
      "input_schema": {
        "properties": {
          "package_ref_or_match_spec": {
            "title": "Package Ref Or Match Spec",
            "type": "string"
          },
          "channel": {
            "title": "Channel",
            "type": "string"
          },
          "platform": {
            "title": "Platform",
            "type": "string"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "title": "Offset",
            "type": "integer"
          }
        },
        "required": [
          "package_ref_or_match_spec",
          "channel",
          "platform"
        ],
        "type": "object"
      },
      "annotations": null,
      "tags": null,
      "enabled": true
    }
  ],
  "prompts": [],
  "resources": [],
  "templates": [],
  "capabilities": {
    "tools": {
      "listChanged": true
    },
    "resources": {
      "subscribe": false,
      "listChanged": false
    },
    "prompts": {
      "listChanged": false
    },
    "logging": {}
  }
}