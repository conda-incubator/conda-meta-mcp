{
  "environment": {
    "fastmcp": "2.12.2",
    "mcp": "1.13.1"
  },
  "serverInfo": {
    "name": "Conda ECO System Meta Data MCP",
    "title": null,
    "version": "1.13.1"
  },
  "capabilities": {},
  "tools": [
    {
      "name": "cli_help",
      "title": null,
      "description": "Provides the full help text for the given tool including all subcommands and options.\n\nTo be used to answer advanced CLI questions beyond the knowledge cutoff of models,\nto e.g. help with new features that recently landed in the tool.\n\ntool: str = \"conda\"\nlimit: max number of lines returned (0 means all)\noffset: number of initial lines skipped\nReturns:\n  A string with the help",
      "inputSchema": {
        "properties": {
          "tool": {
            "default": "conda",
            "title": "Tool",
            "type": "string"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "title": "Offset",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "outputSchema": {
        "properties": {
          "result": {
            "title": "Result",
            "type": "string"
          }
        },
        "required": [
          "result"
        ],
        "title": "_WrappedResult",
        "type": "object",
        "x-fastmcp-wrap-result": true
      },
      "annotations": null,
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      }
    },
    {
      "name": "info",
      "title": null,
      "description": "Display information about the MCP instance.",
      "inputSchema": {
        "properties": {},
        "type": "object"
      },
      "outputSchema": {
        "additionalProperties": true,
        "type": "object"
      },
      "annotations": null,
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      }
    },
    {
      "name": "package_insights",
      "title": null,
      "description": "Provides insights into a package's info tarball\n\nThat includes the rendered recipe (meta.yaml) that allows for easy inspection of the\npackage's build process, e.g. see build, host and run time dependencies. Which have\nbig influence on what packages are linked against. The run_exports which end up as\nrun time dependencies for other packages linked against this package. And the about\ninformation which contain the remote_url and sha to the repo location where the\npackage recipe is maintained. That helps to open PRs in the right location to fix\nissues with the recipe.\n\nArgs:\n  url: The full package URL, e.g.\n  \"https://conda.anaconda.org/conda-forge/linux-64/numpy-1.24.3-py311h7f8727e_0.tar.bz2\"\n\n  file: can be set to \"some\", \"all\", \"list-without-content\" or a specific filename\n  limit: max number of lines returned per file (0 means all; ignored for\n    list-without-content)\n  offset: number of initial lines skipped per file (ignored for\n    list-without-content)\n  Returns:\n    A dictionary with key=filename, value=content.",
      "inputSchema": {
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "file": {
            "default": "some",
            "title": "File",
            "type": "string"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "title": "Offset",
            "type": "integer"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "outputSchema": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "annotations": null,
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      }
    },
    {
      "name": "package_search",
      "title": null,
      "description": "Search available conda packages matching the given package_ref_or_match_spec, channel, and\nplatform.\n\nFeatures:\n  - Results are deduplicated.\n  - Ordered by newest (version, then build_number descending).\n  - limit=1 reliably returns the single newest record.\n  - Supports paging via (offset, limit).\n\nArgs:\n  package_ref_or_match_spec (PackageRef or MatchSpec or str):\n    e.g. \"numpy\", \"numpy>=1.20\", \"numpy=1.20.3\", \"numpy=1.20.3=py38h550f1ac_0\"\n  channel (str): e.g. \"defaults\", \"conda-forge\", \"bioconda\", \"nvidia\"\n  platform (str): e.g. \"linux-64\", \"linux-aarch64\", \"osx-64\", \"osx-arm64\", \"win-64\"\n  limit (int): Maximum number of results to return (0 means all).\n  offset (int): Number of results to skip before applying limit (for paging).",
      "inputSchema": {
        "properties": {
          "package_ref_or_match_spec": {
            "title": "Package Ref Or Match Spec",
            "type": "string"
          },
          "channel": {
            "title": "Channel",
            "type": "string"
          },
          "platform": {
            "title": "Platform",
            "type": "string"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "title": "Offset",
            "type": "integer"
          }
        },
        "required": [
          "package_ref_or_match_spec",
          "channel",
          "platform"
        ],
        "type": "object"
      },
      "outputSchema": {
        "$defs": {
          "PackageRecord": {
            "properties": {
              "version": {
                "title": "Version",
                "type": "string"
              },
              "build_number": {
                "title": "Build Number",
                "type": "string"
              },
              "build": {
                "title": "Build",
                "type": "string"
              },
              "url": {
                "title": "Url",
                "type": "string"
              },
              "depends": {
                "title": "Depends",
                "type": "string"
              }
            },
            "required": [
              "version",
              "build_number",
              "build",
              "url",
              "depends"
            ],
            "title": "PackageRecord",
            "type": "object"
          }
        },
        "properties": {
          "result": {
            "items": {
              "$ref": "#/$defs/PackageRecord"
            },
            "title": "Result",
            "type": "array"
          }
        },
        "required": [
          "result"
        ],
        "title": "_WrappedResult",
        "type": "object",
        "x-fastmcp-wrap-result": true
      },
      "annotations": null,
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      }
    },
    {
      "name": "import_mapping",
      "title": null,
      "description": "Map a (possibly dotted) Python import name to the most likely conda package\nand expose supporting context.\n\nWhat this does:\n  - Normalizes the import to its top-level module (e.g. \"numpy.linalg\" -> \"numpy\")\n  - Retrieves an approximate candidate set of conda packages that may provide it\n  - Applies a heuristic to pick a single \"best\" package\n  - Returns a structured result with the decision rationale\n\nHeuristic labels:\n  - identity:          No candidates known; fallback to normalized import\n  - identity_present:  Candidates exist AND the normalized import name is among them\n  - ranked_selection:  Best package chosen via ranked hubs authorities ordering\n  - fallback:          Best package not in candidates (unexpected edge case)\n\nReturned dict schema:\n  {\n    \"query_import\":      original query string supplied by caller\n    \"normalized_import\": top-level portion used for lookup\n    \"best_package\":      chosen conda package name (may equal normalized_import)\n    \"candidate_packages\": sorted list of possible supplying packages (may be empty)\n    \"heuristic\":         one of the heuristic labels above\n  }\n\nArgs:\n  import_name:\n    Import string, e.g. \"yaml\", \"matplotlib.pyplot\", \"sklearn.model_selection\".",
      "inputSchema": {
        "properties": {
          "import_name": {
            "title": "Import Name",
            "type": "string"
          }
        },
        "required": [
          "import_name"
        ],
        "type": "object"
      },
      "outputSchema": {
        "additionalProperties": true,
        "type": "object"
      },
      "annotations": null,
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      }
    }
  ],
  "prompts": [],
  "resources": [],
  "resourceTemplates": []
}